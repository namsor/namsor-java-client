/*
 * Namsor
 * <h2>NamSor SDK infers Gender and Origin from international names</h2>  <p>NamSor specialized data mining software recognizes the <strong>gender</strong>, the <strong>linguistic or cultural origin of personal names</strong> in any alphabet / language, with fine grain and high accuracy.</p>  <p>Visit <a href=\"http://namsor.com\">NamSor.com</a> to learn more.</p> 
 *
 * OpenAPI spec version: 1.1.0
 * Contact: contact@namsor.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.namsor.api;

import com.namsor.ApiCallback;
import com.namsor.ApiClient;
import com.namsor.ApiException;
import com.namsor.ApiResponse;
import com.namsor.Configuration;
import com.namsor.Pair;
import com.namsor.ProgressRequestBody;
import com.namsor.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.namsor.model.ExtractOriginListOutput;
import com.namsor.model.NamesListInput;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class OriginListApi {
    private ApiClient apiClient;

    public OriginListApi() {
        this(Configuration.getDefaultApiClient());
    }

    public OriginListApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for extractOriginList
     * @param xChannelSecret Your API Key (Secret) (required)
     * @param xChannelUser Your API Channel (User) (required)
     * @param namesListInput A list of names to extract origin (up to 1000 at a time) (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call extractOriginListCall(String xChannelSecret, String xChannelUser, List<NamesListInput> namesListInput, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = namesListInput;

        // create path and map variables
        String localVarPath = "/originList";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xChannelSecret != null)
        localVarHeaderParams.put("X-Channel-Secret", apiClient.parameterToString(xChannelSecret));
        if (xChannelUser != null)
        localVarHeaderParams.put("X-Channel-User", apiClient.parameterToString(xChannelUser));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call extractOriginListValidateBeforeCall(String xChannelSecret, String xChannelUser, List<NamesListInput> namesListInput, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'xChannelSecret' is set
        if (xChannelSecret == null) {
            throw new ApiException("Missing the required parameter 'xChannelSecret' when calling extractOriginList(Async)");
        }
        
        // verify the required parameter 'xChannelUser' is set
        if (xChannelUser == null) {
            throw new ApiException("Missing the required parameter 'xChannelUser' when calling extractOriginList(Async)");
        }
        
        // verify the required parameter 'namesListInput' is set
        if (namesListInput == null) {
            throw new ApiException("Missing the required parameter 'namesListInput' when calling extractOriginList(Async)");
        }
        

        com.squareup.okhttp.Call call = extractOriginListCall(xChannelSecret, xChannelUser, namesListInput, progressListener, progressRequestListener);
        return call;

    }

    /**
     * To determin the origin of many names (up to 1000)
     * To extract the likely linguistic/cultural origins of each name in a list (up to 1000 names) at country-level. 
     * @param xChannelSecret Your API Key (Secret) (required)
     * @param xChannelUser Your API Channel (User) (required)
     * @param namesListInput A list of names to extract origin (up to 1000 at a time) (required)
     * @return ExtractOriginListOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ExtractOriginListOutput extractOriginList(String xChannelSecret, String xChannelUser, List<NamesListInput> namesListInput) throws ApiException {
        ApiResponse<ExtractOriginListOutput> resp = extractOriginListWithHttpInfo(xChannelSecret, xChannelUser, namesListInput);
        return resp.getData();
    }

    /**
     * To determin the origin of many names (up to 1000)
     * To extract the likely linguistic/cultural origins of each name in a list (up to 1000 names) at country-level. 
     * @param xChannelSecret Your API Key (Secret) (required)
     * @param xChannelUser Your API Channel (User) (required)
     * @param namesListInput A list of names to extract origin (up to 1000 at a time) (required)
     * @return ApiResponse&lt;ExtractOriginListOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ExtractOriginListOutput> extractOriginListWithHttpInfo(String xChannelSecret, String xChannelUser, List<NamesListInput> namesListInput) throws ApiException {
        com.squareup.okhttp.Call call = extractOriginListValidateBeforeCall(xChannelSecret, xChannelUser, namesListInput, null, null);
        Type localVarReturnType = new TypeToken<ExtractOriginListOutput>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * To determin the origin of many names (up to 1000) (asynchronously)
     * To extract the likely linguistic/cultural origins of each name in a list (up to 1000 names) at country-level. 
     * @param xChannelSecret Your API Key (Secret) (required)
     * @param xChannelUser Your API Channel (User) (required)
     * @param namesListInput A list of names to extract origin (up to 1000 at a time) (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call extractOriginListAsync(String xChannelSecret, String xChannelUser, List<NamesListInput> namesListInput, final ApiCallback<ExtractOriginListOutput> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = extractOriginListValidateBeforeCall(xChannelSecret, xChannelUser, namesListInput, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ExtractOriginListOutput>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
